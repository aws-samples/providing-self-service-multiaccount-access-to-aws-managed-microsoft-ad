# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT-0

# This is a sample template for creating an AWS Directory Service for Microsoft AD directory

AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::LanguageExtensions
Description: AWS Managed Microsoft AD

Parameters:
  ADDomainName:
    Type: String
    Description: The fully qualified name for the directory, such as corp.example.com

  ADShortName: 
    Type: String
    Description: The short name for the directory, such as CORP

  Edition:
    Default: Enterprise
    Description: AWS Managed Microsoft AD edition. Enterprise has a larger quota for the number of shares, https://docs.aws.amazon.com/directoryservice/latest/admin-guide/ms_ad_limits.html
    Type: String
    AllowedValues:
      - Enterprise
      - Standard

  VpcId: 
    Description: VPC ID
    Type: AWS::EC2::VPC::Id

  SubnetID1: 
    Description: First subnet ID to use
    Type: AWS::EC2::Subnet::Id

  SubnetID2: 
    Description: Second subnet ID to use, different AZ from first subnet.
    Type: AWS::EC2::Subnet::Id

  LogRetentionDays: 
    Description: CloudWatch log retention in days, for AWS Managed Microsoft AD logs.
    Type: Number
    Default: 731
    # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-logs-loggroup.html
    AllowedValues: [ 1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653 ]

  NotificationEmailAddress01:
    Description: (Optional) Email address for directory status notifications
    Type: String
    Default: ''

  NotificationEmailAddress02:
    Description: (Optional) Email address for directory status notifications
    Type: String
    Default: ''

  CreateEC2Instance:
      Description: Create AWS Managed Microsoft AD management EC2 host? This is used to configure the directory, and can be shut down when not required.
      Type: String
      Default: "Yes"
      AllowedValues:
        - "Yes"
        - "No"

  EC2AMI:
      Description:  EC2 management host Windows AMI ID to use, in SSM.
      Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
      Default: '/aws/service/ami-windows-latest/Windows_Server-2022-English-Full-Base'
      
  EC2Type:
      Description:  EC2 management host EC2 type
      Type: String
      Default: t3.small


Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Networking
        Parameters:
          - VpcId
          - SubnetID1
          - SubnetID2

      - Label:
          default: Directory settings
        Parameters:
          - ADDomainName
          - ADShortName
          - Edition
          - LogRetentionDays
          - NotificationEmailAddress01
          - NotificationEmailAddress02

      - Label:
          default: Management host
        Parameters:
          - CreateEC2Instance
          - EC2AMI
          - EC2Type
     
    ParameterLabels:
      VpcId: 
        default: VPC ID
      SubnetID1:
        default: Subnet ID 1
      SubnetID2:
        default: Subnet ID 2
      ADDomainName:
        default: Directory DNS name
      ADShortName:
        default: Directory NetBIOS short name
      Edition:
        default: AWS Managed Microsoft AD Edition
      LogRetentionDays:
        default: Log retention in days
      NotificationEmailAddress01:
        default: (Optional) Email address for notifications
      NotificationEmailAddress02:
        default: (Optional) Additional Email address for notifications
      CreateEC2Instance:
        default: Create EC2 management host?
      EC2AMI:
        default: AMI Parameter    
      EC2Type:
        default: EC2 management host instance type

Rules:
  SubnetsInVPC:
    Assertions:
      - Assert:
          'Fn::Equals':
            - 'Fn::ValueOf':
                - SubnetID1
                - VpcId
            - !Ref VpcId
        AssertDescription: Subnet1 must be in given VPC
      - Assert:
          'Fn::Equals':
            - 'Fn::ValueOf':
                - SubnetID2
                - VpcId
            - !Ref VpcId
        AssertDescription: Subnet2 must be in given VPC


Conditions:
  CreateEC2Instance: !Equals [ !Ref CreateEC2Instance, "Yes" ]
  NotificationEmailAddress01: !Not [ !Equals [ !Ref NotificationEmailAddress01, '' ] ]
  NotificationEmailAddress02: !Not [ !Equals [ !Ref NotificationEmailAddress02, '' ] ]


Resources:

######################################
# AWS Managed Microsoft AD directory #
######################################

  DomainSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: AWS-Managed-Microsoft-AD-credentials
      Description: Credentials for AWS Managed Microsoft AD
      GenerateSecretString:
        SecretStringTemplate: '{"username": "Admin"}'
        GenerateStringKey: "password"
        PasswordLength: 25

  ManagedAD: 
    Type: AWS::DirectoryService::MicrosoftAD
    Properties: 
      Name: !Ref ADDomainName
      Password: !Sub "{{resolve:secretsmanager:${DomainSecret}::password}}"
      ShortName: !Ref ADShortName
      VpcSettings: 
        SubnetIds: 
          - !Ref SubnetID1
          - !Ref SubnetID2
        VpcId: !Ref VpcId
      Edition: !Ref Edition


###########
# Logging #
###########

  CloudWatchLogGroup: 
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: !Sub /aws/directoryservice/${ManagedAD}
      RetentionInDays: !Ref LogRetentionDays

  CloudWatchLogGroupPolicy:
    Type: AWS::Logs::ResourcePolicy
    Properties: 
      PolicyName: ManagedAD-logs
      PolicyDocument:
        Fn::ToJsonString:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Principal: 
                Service: ds.amazonaws.com
              Action:
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: !GetAtt CloudWatchLogGroup.Arn  

  CustomConfigureCloudWatchLogs:
    Type: Custom::ConfigureCloudWatchLogs
    Properties:
      ServiceToken: !GetAtt CustomResourceManagedADLogsLambda.Arn
      DirectoryId: !Ref ManagedAD
      CloudWatchLogGroupName: !Ref CloudWatchLogGroup

  CustomResourceManagedADLogsRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: [ lambda.amazonaws.com ]
            Action: [ sts:AssumeRole ]
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: Lambda
          PolicyDocument:
            Version: 2012-10-17
            Statement:           
              - Effect: Allow
                Action:
                  - ds:CreateLogSubscription
                  - ds:DeleteLogSubscription
                Resource: !Sub arn:${AWS::Partition}:ds:${AWS::Region}:${AWS::AccountId}:directory/${ManagedAD}

  CustomResourceManagedADLogsLambda:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.11
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt CustomResourceManagedADLogsRole.Arn
      Timeout: 60
      Code: 
        ZipFile: |
          import boto3
          import cfnresponse
          import traceback
          import time

          ds = boto3.client('ds')

          def handler(event, context):
            print(f'event is {event}')
            response_payload = {}
            response_status = cfnresponse.FAILED
            physical_resource_id = 'DirectoryServiceLogs'
            resource_policy_name = 'DSLogSubscription'

            try:
              if event['RequestType'] == 'Delete':
                # Always return a success as otherwise it can cause the stack to get stuck:
                response_status = cfnresponse.SUCCESS
                try:
                  directory_id = event['ResourceProperties']['DirectoryId']
                  ds.delete_log_subscription(
                    DirectoryId = directory_id
                  )
                except:
                  traceback.print_exc()
                
              elif event['RequestType'] in ('Create','Update'):
                directory_id = event['ResourceProperties']['DirectoryId']
                loggroup_name = event['ResourceProperties']['CloudWatchLogGroupName']

                # Put the DS log subscription
                # Blindly delete any log subscriptions if any (eg. updated log group)
                try:
                  ds.delete_log_subscription(  DirectoryId = directory_id )
                  time.sleep(30)
                except:
                  pass
                # Then create the log subscription
                ds.create_log_subscription(
                  DirectoryId = directory_id,
                  LogGroupName = loggroup_name
                )
                response_status = cfnresponse.SUCCESS

            except Exception as e:
              print('ERROR: Caught exception:')
              print(e)
              traceback.print_exc()

            finally:
              print('Sending cfn response')
              cfnresponse.send(event, context, response_status, response_payload, physical_resource_id)


#####################
# SNS Notifications #
#####################

  ManagedADNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: AWS Managed Microsoft AD status notifications

  SNSSubscription01:
    Type: AWS::SNS::Subscription
    Condition: NotificationEmailAddress01
    Properties:
      Protocol: email
      Endpoint: !Ref NotificationEmailAddress01
      TopicArn: !Ref ManagedADNotificationTopic

  SNSSubscription02:
    Type: AWS::SNS::Subscription
    Condition: NotificationEmailAddress02
    Properties:
      Protocol: email
      Endpoint: !Ref NotificationEmailAddress02
      TopicArn: !Ref ManagedADNotificationTopic

  CustomConfigureNotifications:
    Type: Custom::ConfigureNotifications
    Properties:
      ServiceToken: !GetAtt CustomResourceNotificationLambda.Arn
      DirectoryId: !Ref ManagedAD
      SNSTopicName: !GetAtt ManagedADNotificationTopic.TopicName

  CustomResourceNotificationsRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: [ lambda.amazonaws.com ]
            Action: [ sts:AssumeRole ]
      ManagedPolicyArns: [ arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole ]
      Policies:
        - PolicyName: Lambda
          PolicyDocument:
            Version: 2012-10-17
            Statement:          
              - Effect: Allow
                Action:
                  - ds:RegisterEventTopic
                  - ds:DeregisterEventTopic
                Resource: !Sub arn:${AWS::Partition}:ds:${AWS::Region}:${AWS::AccountId}:directory/${ManagedAD}

  CustomResourceNotificationLambda:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.11
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt CustomResourceNotificationsRole.Arn
      Timeout: 60
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          import traceback

          ds = boto3.client('ds')

          def handler(event, context):
            print(f'event is {event}')
            response_payload = {}
            response_status = cfnresponse.FAILED
            physical_resource_id = 'unset'

            try:
              if event['RequestType'] == 'Delete':
                # Note that this Delete would also be used in updates when the SNS
                # topic changes, as CFN would Create this custom resource with the new SNS topic
                # and then Delete the old custom resource. 

                # Always return a success as otherwise it can cause the stack to get stuck:
                response_status = cfnresponse.SUCCESS
                # SNS topic is the physical resource ID:
                existing_sns_topic = event['PhysicalResourceId']
                directory_id = event['ResourceProperties']['DirectoryId']
                ds.deregister_event_topic(
                  DirectoryId = directory_id,
                  TopicName = existing_sns_topic
                )
                
              elif event['RequestType'] in ('Create','Update'):
                directory_id = event['ResourceProperties']['DirectoryId']
                sns_topic = event['ResourceProperties']['SNSTopicName']
                physical_resource_id = sns_topic
                ds.register_event_topic(
                  DirectoryId = directory_id,
                  TopicName = sns_topic
                )
                response_status = cfnresponse.SUCCESS
            except Exception as e:
              print('ERROR: Caught exception:')
              print(e)
              traceback.print_exc()
            finally:
              print('Sending cfn response')
              cfnresponse.send(event, context, response_status, response_payload, physical_resource_id)



#######################
# EC2 Management Host #
#######################

  EC2SSMRole:
    Condition: CreateEC2Instance
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/AmazonSSMDirectoryServiceAccess


  InstanceProfile:
    Condition: CreateEC2Instance
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles: [ !Ref EC2SSMRole ]
      InstanceProfileName: AWSManagedMicrosoftADManagementHost


  InstanceSecurityGroup:
    Condition: CreateEC2Instance
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: Management EC2 instance for AWS Managed Microsoft AD
      GroupDescription: Management EC2 instance for AWS Managed Microsoft AD
      VpcId: !Ref VpcId
      # No ingress rules required, as we'd be using SSM or Fleet Manager to access it.
      SecurityGroupEgress:
      - IpProtocol: -1
        CidrIp: 0.0.0.0/0


  EC2Instance:
    Condition: CreateEC2Instance
    Type: AWS::EC2::Instance
    Properties:
      IamInstanceProfile: !Ref InstanceProfile
      SsmAssociations:
        - DocumentName: AWS-JoinDirectoryServiceDomain
          AssociationParameters:
            - Key: directoryId
              Value:
                - !Ref ManagedAD
            - Key: directoryName
              Value:
                - !Ref ADDomainName
            - Key: dnsIpAddresses
              Value:
                - !Select [ 0, !GetAtt ManagedAD.DnsIpAddresses ]
                - !Select [ 1, !GetAtt ManagedAD.DnsIpAddresses ]
      ImageId: !Ref EC2AMI
      InstanceType: !Ref EC2Type
      Tags:
        - Key: Name
          Value: AWS Managed Microsoft AD management host
        - Key: description
          Value: Used for configuring the AWS Managed Microsoft AD directory. This can be shut down when not needed.
      SubnetId: !Ref SubnetID1
      SecurityGroupIds:
        - !GetAtt InstanceSecurityGroup.GroupId
      UserData:
        Fn::Base64: |
          <powershell>
          Install-WindowsFeature -Name GPMC,RSAT-AD-PowerShell,RSAT-AD-AdminCenter,RSAT-ADDS-Tools,RSAT-DNS-Server
          </powershell>


###########
# Outputs #
###########

Outputs:
  ManagedADID:
    Description: AWS Managed Microsoft AD directory ID
    Value: !Ref ManagedAD
    Export:
      Name: ManagedADID

  ManagedADDomain:
    Description: AWS Managed Microsoft AD domain
    Value: !Ref ADDomainName
    Export:
      Name: ManagedADDomain

  ManagedADIPAddress1:
    Description: AWS Managed Microsoft AD IP 1
    Value: !Select [ 0, !GetAtt ManagedAD.DnsIpAddresses ]
    Export:
      Name: ManagedADIPAddress1

  ManagedADIPAddress2:
    Description: AWS Managed Microsoft AD IP 2
    Value: !Select [ 1, !GetAtt ManagedAD.DnsIpAddresses ]
    Export:
      Name: ManagedADIPAddress2

  ManagedADVpcId:
    Description: AWS Managed Microsoft AD VPC ID
    Value: !Ref VpcId
    Export:
      Name: ManagedADVpcID

  ManagedADSubnet1:
    Description: AWS Managed Microsoft AD Subnet ID 1
    Value: !Ref SubnetID1
    Export:
      Name: ManagedADSubnetID1

  ManagedADSubnet2:
    Description: AWS Managed Microsoft AD Subnet ID 2
    Value: !Ref SubnetID2
    Export:
      Name: ManagedADSubnetID2

  ManagedADUsername:
    Description: AWS Managed Microsoft AD username
    Value: Admin
    
  ManagedADPassword:
    Description: AWS Managed Microsoft AD password Secrets Manager URL
    Value: !Sub https://${AWS::Region}.console.aws.amazon.com/secretsmanager/secret?name=AWS-Managed-Microsoft-AD-credentials&region=${AWS::Region}
    
  CloudWatchLogGroupName:
    Description: Managed AD CloudWatch Log Group name
    Value: !Ref CloudWatchLogGroup

  RDPWebURL:
    Condition: CreateEC2Instance
    Description: URL for RDP via Fleet Manager
    Value: !Sub https://${AWS::Region}.console.aws.amazon.com/systems-manager/managed-instances/rdp-connect?region=${AWS::Region}&instances=${EC2Instance}
